{"version":3,"sources":["myTodo/header.jsx","myTodo/todoItem.jsx","myTodo/list.jsx","myTodo/app.jsx","index.js"],"names":["Header","state","task","getData","props","className","type","name","id","placeholder","onChange","event","setState","target","value","onClick","Component","ToDoItem","completed","whichListLayout","style","marginTop","deleteItem","finished","Fragment","this","List","todos","isCompleted","taskID","completedTask","map","todo","deleteListItem","updatedTodos","filter","generateToDo","inputData","newToDo","Math","floor","random","unshift","console","log","addData","displayUnfinishedList","key","displayFinishedList","length","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f321cec3.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n  state = { \r\n    task: '',\r\n    getData: this.props.getData\r\n  }\r\n\r\n\r\n\r\n  render() { \r\n    return ( \r\n      <div className=\"app-header\">\r\n        <input \r\n          className=\"input-bar\" \r\n          type=\"text\" name=\"inputValue\" \r\n          id=\"\" placeholder=\"Please type your task\"\r\n          onChange={(event) => this.setState({task: event.target.value})}\r\n          />\r\n        <button \r\n          onClick={() => {\r\n            this.props.getData(this.state.task);\r\n            // reset field\r\n          }}\r\n          className=\"input-button\" \r\n          type=\"submit\"\r\n        >Add</button>\r\n      </div>\r\n     );\r\n  }\r\n}\r\n \r\nexport default Header;","import React, { Component } from 'react';\r\n\r\nclass ToDoItem extends Component {\r\n  state = { \r\n    task: this.props.task,\r\n    completed: this.props.completed,\r\n    id: this.props.id\r\n  }\r\n\r\n  whichListLayout = () => {\r\n    if (this.state.completed === false) {\r\n      return (\r\n        <li style={{marginTop: \"15px\"}}>\r\n          <span className=\"listSpan\">{this.state.task}</span>\r\n\r\n          <button className=\"listBtn1\" \r\n            onClick={() => this.props.deleteItem(this.state.id)}>Delete\r\n          </button>\r\n\r\n          <button className=\"listBtn2\" \r\n            onClick={() => this.props.finished(this.state.id)}>Completed\r\n          </button>\r\n        </li>\r\n      )\r\n    }\r\n\r\n    return <li style={{marginTop: \"15px\"}}><span>{this.state.task}</span></li>\r\n  }\r\n\r\n  render() { \r\n    return <React.Fragment>{this.whichListLayout()}</React.Fragment>;\r\n  }\r\n}\r\n \r\nexport default ToDoItem;","import React, { Component } from 'react';\r\n\r\nimport Header from './header';\r\nimport ToDoItem from './todoItem';\r\n\r\nclass List extends Component {\r\n  state = { \r\n    todos: []\r\n  }\r\n\r\n  isCompleted = (taskID) => {\r\n    let completedTask = this.state.todos.map(todo => {\r\n      if (todo.id === taskID) {\r\n        todo.completed = true;\r\n      }\r\n\r\n      return todo;\r\n    });\r\n\r\n    this.setState({todos: completedTask});\r\n  }\r\n\r\n  deleteListItem = (taskID) => {\r\n    const updatedTodos = this.state.todos.filter(todo => todo.id !== taskID);\r\n    this.setState({todos: updatedTodos});\r\n  }\r\n\r\n  generateToDo = (inputData) => {\r\n    let newToDo = {\r\n      id: Math.floor(Math.random() * 1000),\r\n      task: inputData,\r\n      completed: false\r\n    }\r\n    this.state.todos.unshift(newToDo);\r\n    console.log(newToDo);\r\n    let addData = this.state.todos;\r\n\r\n    this.setState({todos: addData});\r\n  }\r\n\r\n  displayUnfinishedList = () => {\r\n    return (<React.Fragment>{\r\n      this.state.todos.map(todo => {\r\n        if (todo.completed === false) {\r\n          return (<ToDoItem \r\n            key={todo.id} \r\n            id={todo.id}\r\n            task={todo.task} \r\n            completed={todo.completed}\r\n            finished={this.isCompleted}\r\n            deleteItem={this.deleteListItem}\r\n          />)\r\n        }\r\n      })\r\n    }</React.Fragment>)\r\n  };\r\n\r\n  displayFinishedList = () => {\r\n    return (<React.Fragment>{\r\n      this.state.todos.map(todo => {\r\n        if (todo.completed === true) {\r\n          return (<ToDoItem \r\n            key={todo.id} \r\n            id={todo.id}\r\n            task={todo.task} \r\n            completed={todo.completed}\r\n          />)\r\n        }\r\n      })\r\n    }</React.Fragment>)\r\n  };\r\n\r\n  render() { \r\n    return ( \r\n      <main>\r\n        <Header getData={this.generateToDo} />\r\n\r\n        <div className=\"no-task\">\r\n          {this.state.todos.length === 0 && <h1>No ToDo's at the time!</h1>}\r\n        </div>\r\n\r\n        <section className=\"list1\">\r\n          <h3>Need to finish:</h3>\r\n          {this.displayUnfinishedList()}\r\n        </section>\r\n\r\n        <section className=\"list2\">\r\n          <h3>All done:</h3>\r\n          {this.displayFinishedList()}\r\n        </section>\r\n\r\n      </main>\r\n     );\r\n  }\r\n}\r\n \r\nexport default List;","import React, { Component } from 'react';\r\n\r\nimport List from './list';\r\nimport '../index.css'\r\n\r\nclass App extends Component {\r\n  state = {  }\r\n  render() { \r\n    return ( \r\n      <React.Fragment>\r\n        <h1 className=\"app-name\">My To-Do List</h1>\r\n        <List />\r\n      </React.Fragment>\r\n     );\r\n  }\r\n}\r\n \r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './myTodo/app';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}