{"version":3,"sources":["myTodo/header.jsx","myTodo/todoItem.jsx","myTodo/list.jsx","myTodo/app.jsx","index.js"],"names":["Header","state","task","dataFromInput","props","className","id","type","name","placeholder","onChange","event","setState","target","value","onClick","preventDefault","document","getElementById","reset","Component","ToDoItem","completed","whichListLayout","style","marginTop","deleteItem","finished","Fragment","this","List","idCounter","todos","isCompleted","taskID","completedTask","map","todo","deleteListItem","updatedTodos","filter","generateToDo","inputData","newToDo","unshift","console","log","addData","displayUnfinishedList","key","displayFinishedList","length","textDecoration","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.1788488e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n  state = { \r\n    task: '',\r\n    dataFromInput: this.props.dataFromInput\r\n  }\r\n\r\n\r\n\r\n  render() { \r\n    return ( \r\n      <form className=\"app-header\" id=\"myForm\">\r\n        <input \r\n          className=\"input-bar\" \r\n          type=\"text\" name=\"inputValue\" \r\n          id=\"\" placeholder=\"Please type your task\"\r\n          onChange={(event) => this.setState({task: event.target.value})}\r\n          />\r\n        <button \r\n          onClick={(event) => {\r\n            this.props.dataFromInput(this.state.task);\r\n            event.preventDefault();\r\n            document.getElementById(\"myForm\").reset(); \r\n          }}\r\n          className=\"input-button\" \r\n          type=\"submit\"\r\n          >Add</button>\r\n      </form>\r\n     );\r\n  }\r\n}\r\n \r\nexport default Header;","import React, { Component } from 'react';\r\n\r\nclass ToDoItem extends Component {\r\n  state = { \r\n    task: this.props.task,\r\n    completed: this.props.completed,\r\n    id: this.props.id\r\n  }\r\n\r\n  whichListLayout = () => {\r\n    if (this.state.completed === false) {\r\n      return (\r\n        <li style={{marginTop: \"15px\"}}>\r\n          <span className=\"listSpan\">{this.state.task}</span>\r\n\r\n          <button className=\"listBtn1\" \r\n            onClick={() => this.props.deleteItem(this.state.id)}>Delete\r\n          </button>\r\n\r\n          <button className=\"listBtn2\" \r\n            onClick={() => this.props.finished(this.state.id)}>Completed\r\n          </button>\r\n        </li>\r\n      )\r\n    }\r\n\r\n    return <li \r\n            style={{marginTop: \"15px\"}}>\r\n            <span className=\"listSpan\">{this.state.task}</span>\r\n          </li>\r\n  }\r\n\r\n  render() { \r\n    return <React.Fragment>{this.whichListLayout()}</React.Fragment>;\r\n  }\r\n}\r\n \r\nexport default ToDoItem;","import React, { Component } from 'react';\r\n\r\nimport Header from './header';\r\nimport ToDoItem from './todoItem';\r\n\r\nclass List extends Component {\r\n  state = { \r\n    idCounter: 1,\r\n    todos: []\r\n  }\r\n\r\n  isCompleted = (taskID) => {\r\n    let completedTask = this.state.todos.map(todo => {\r\n      if (todo.id === taskID) {\r\n        todo.completed = true;\r\n      }\r\n\r\n      return todo;\r\n    });\r\n\r\n    this.setState({todos: completedTask});\r\n  }\r\n\r\n  deleteListItem = (taskID) => {\r\n    const updatedTodos = this.state.todos.filter(todo => todo.id !== taskID);\r\n    this.setState({todos: updatedTodos});\r\n  }\r\n\r\n  generateToDo = (inputData) => {\r\n    this.setState({idCounter: this.state.idCounter + 1});\r\n    let newToDo = {\r\n      id: this.state.idCounter,\r\n      task: inputData,\r\n      completed: false\r\n    }\r\n    this.state.todos.unshift(newToDo);\r\n    console.log(newToDo);\r\n    let addData = this.state.todos;\r\n\r\n    this.setState({todos: addData});\r\n  }\r\n\r\n  displayUnfinishedList = () => {\r\n    return (<React.Fragment>{\r\n      this.state.todos.map(todo => {\r\n        if (todo.completed === false) {\r\n          return (<ToDoItem \r\n            key={todo.id} \r\n            id={todo.id}\r\n            task={todo.task} \r\n            completed={todo.completed}\r\n            finished={this.isCompleted}\r\n            deleteItem={this.deleteListItem}\r\n          />)\r\n        }\r\n      })\r\n    }</React.Fragment>)\r\n  };\r\n\r\n  displayFinishedList = () => {\r\n    return (<React.Fragment>{\r\n      this.state.todos.map(todo => {\r\n        if (todo.completed === true) {\r\n          return (<ToDoItem \r\n            key={todo.id} \r\n            id={todo.id}\r\n            task={todo.task} \r\n            completed={todo.completed}\r\n          />)\r\n        }\r\n      })\r\n    }</React.Fragment>)\r\n  };\r\n\r\n  render() { \r\n    return ( \r\n      <main>\r\n        <Header dataFromInput={this.generateToDo} />\r\n\r\n        <div className=\"no-task\">\r\n          {this.state.todos.length === 0 && <h1>No ToDo's at the time!</h1>}\r\n        </div>\r\n\r\n        <section className=\"list1\">\r\n          <h2 style={{textDecoration: \"underline\"}}>Need to finish:</h2>\r\n          {this.displayUnfinishedList()}\r\n        </section>\r\n\r\n        <section className=\"list2\">\r\n          <h2 style={{textDecoration: \"underline\"}}>All done:</h2>\r\n          {this.displayFinishedList()}\r\n        </section>\r\n\r\n      </main>\r\n     );\r\n  }\r\n}\r\n \r\nexport default List;","import React, { Component } from 'react';\r\n\r\nimport List from './list';\r\nimport '../index.css'\r\n\r\nclass App extends Component {\r\n  state = {  }\r\n  render() { \r\n    return ( \r\n      <React.Fragment>\r\n        <h1 className=\"app-name\">My To-Do List</h1>\r\n        <List />\r\n      </React.Fragment>\r\n     );\r\n  }\r\n}\r\n \r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './myTodo/app';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}