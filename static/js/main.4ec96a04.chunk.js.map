{"version":3,"sources":["myTodo/header.jsx","myTodo/todoItem.jsx","myTodo/list.jsx","myTodo/app.jsx","index.js"],"names":["Header","state","task","className","id","type","placeholder","onChange","event","setState","target","value","onClick","props","dataFromInput","preventDefault","document","getElementById","reset","Component","ToDoItem","whichListLayout","completed","style","marginTop","deleteItem","finished","Fragment","this","List","idCounter","todos","isCompleted","taskID","completedTask","map","todo","deleteListItem","updatedTodos","filter","generateToDo","inputData","newToDo","unshift","console","log","addData","displayUnfinishedList","key","displayFinishedList","length","textDecoration","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.4ec96a04.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n  state = { \r\n    task: ''\r\n  }\r\n\r\n  render() { \r\n    return ( \r\n      <form className=\"app-header\" id=\"myForm\">\r\n        <input \r\n          className=\"input-bar\" \r\n          type=\"text\"\r\n          placeholder=\"Please type your task\"\r\n          onChange={(event) => this.setState({task: event.target.value})}\r\n          />\r\n        <button \r\n          onClick={(event) => {\r\n            this.props.dataFromInput(this.state.task);\r\n            event.preventDefault();\r\n            document.getElementById(\"myForm\").reset(); \r\n          }}\r\n          className=\"input-button\" \r\n          type=\"submit\"\r\n          >Add</button>\r\n      </form>\r\n     );\r\n  }\r\n}\r\n \r\nexport default Header;","import React, { Component } from \"react\";\r\n\r\nclass ToDoItem extends Component {\r\n  whichListLayout = () => {\r\n    if (this.props.completed === false) {\r\n      return (\r\n        <li style={{ marginTop: \"15px\" }}>\r\n          <span className=\"listSpan\">{this.props.task}</span>\r\n\r\n          <button\r\n            className=\"listBtn1\"\r\n            onClick={() => this.props.deleteItem(this.props.id)}\r\n          >\r\n            Delete\r\n          </button>\r\n\r\n          <button\r\n            className=\"listBtn2\"\r\n            onClick={() => this.props.finished(this.props.id)}\r\n          >\r\n            Completed\r\n          </button>\r\n        </li>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <li style={{ marginTop: \"15px\" }}>\r\n        <span className=\"listSpan\">{this.props.task}</span>\r\n      </li>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return <React.Fragment>{this.whichListLayout()}</React.Fragment>;\r\n  }\r\n}\r\n\r\nexport default ToDoItem;\r\n","import React, { Component } from \"react\";\r\n\r\nimport Header from \"./header\";\r\nimport ToDoItem from \"./todoItem\";\r\n\r\nclass List extends Component {\r\n  state = {\r\n    idCounter: 1,\r\n    todos: []\r\n  };\r\n\r\n  isCompleted = taskID => {\r\n    let completedTask = this.state.todos.map(todo => {\r\n      if (todo.id === taskID) {\r\n        todo.completed = true;\r\n      }\r\n\r\n      return todo;\r\n    });\r\n\r\n    this.setState({ todos: completedTask });\r\n  };\r\n\r\n  deleteListItem = taskID => {\r\n    const updatedTodos = this.state.todos.filter(todo => todo.id !== taskID);\r\n    this.setState({ todos: updatedTodos });\r\n  };\r\n\r\n  generateToDo = inputData => {\r\n    this.setState({ idCounter: this.state.idCounter + 1 });\r\n    let newToDo = {\r\n      id: this.state.idCounter,\r\n      task: inputData,\r\n      completed: false\r\n    };\r\n    this.state.todos.unshift(newToDo);\r\n    console.log(newToDo);\r\n    let addData = this.state.todos;\r\n\r\n    this.setState({ todos: addData });\r\n  };\r\n\r\n  displayUnfinishedList = () => {\r\n    return (\r\n      <React.Fragment>\r\n        {this.state.todos.map(todo => {\r\n          if (todo.completed === false) {\r\n            return (\r\n              <ToDoItem\r\n                key={todo.id}\r\n                id={todo.id}\r\n                task={todo.task}\r\n                completed={todo.completed}\r\n                finished={this.isCompleted}\r\n                deleteItem={this.deleteListItem}\r\n              />\r\n            );\r\n          }\r\n        })}\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  displayFinishedList = () => {\r\n    return (\r\n      <React.Fragment>\r\n        {this.state.todos.map(todo => {\r\n          if (todo.completed === true) {\r\n            return (\r\n              <ToDoItem\r\n                key={todo.id}\r\n                id={todo.id}\r\n                task={todo.task}\r\n                completed={todo.completed}\r\n              />\r\n            );\r\n          }\r\n        })}\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <main>\r\n        <Header dataFromInput={this.generateToDo} />\r\n\r\n        <div className=\"no-task\">\r\n          {this.state.todos.length === 0 && <h1>No ToDo's at the time!</h1>}\r\n        </div>\r\n\r\n        <section className=\"list1\">\r\n          <h2 style={{ textDecoration: \"underline\" }}>Need to finish:</h2>\r\n          {this.displayUnfinishedList()}\r\n        </section>\r\n\r\n        <section className=\"list2\">\r\n          <h2 style={{ textDecoration: \"underline\" }}>All done:</h2>\r\n          {this.displayFinishedList()}\r\n        </section>\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nexport default List;\r\n","import React, { Component } from 'react';\r\n\r\nimport List from './list';\r\nimport '../index.css'\r\n\r\nclass App extends Component {\r\n  state = {  }\r\n  render() { \r\n    return ( \r\n      <React.Fragment>\r\n        <h1 className=\"app-name\">My To-Do List</h1>\r\n        <List />\r\n      </React.Fragment>\r\n     );\r\n  }\r\n}\r\n \r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './myTodo/app';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}